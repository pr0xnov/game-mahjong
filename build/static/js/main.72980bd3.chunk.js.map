{"version":3,"sources":["redux/features/cardsGame/cardsGameSlice.ts","redux/rootReducer.ts","redux/store.ts","helpers/getPrimeNumbers.ts","helpers/getGameCards.ts","helpers/shuffle.ts","redux/features/cardsGame/cardsGameSelectors.ts","components/Header/Header.tsx","layouts/MainLayout/MainLayout.tsx","components/CardsContainer/CardsContainer.tsx","components/Card/Card.tsx","components/GameActions/GameActions.tsx","components/Button/Button.tsx","pages/MainPage/MainPage.tsx","components/App/App.tsx","index.tsx"],"names":["initialState","cards","activeCards","gameInProgress","cardsGameSlice","createSlice","name","reducers","setupGame","state","action","addedCards","payload","startGame","selectCard","cardId","selectedCard","find","card","id","matchedCard","length","number","updatedCards","selectedCardIndex","findIndex","matchedCardIndex","isGuessed","deselectCard","filteredActiveCards","filter","selectCardWithDelayedDeselect","createAsyncThunk","dispatch","getState","cardsGame","setTimeout","forEach","actions","combineReducers","cardsGameReducer","store","configureStore","reducer","rootReducer","devTools","isPrime","num","i","getGameCards","array","primeNumbers","max","push","getPrimeNumbers","duplicatedNumbers","sort","Math","random","map","uuidv4","selectCardGame","selectGameCards","createSelector","selectActiveCards","selectGameInProgress","Header","title","className","MainLayout","children","CardsContainer","Card","isVisible","isActive","restProps","shouldDisplayContent","cn","card_active","card_guessed","GameActions","Button","forwardRef","ref","variant","type","button_contained","App","useDispatch","gameCards","useSelector","some","handleSetupNewGame","generatedCards","useEffect","tabIndex","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72980bd3.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from 'redux/store';\nimport { ICard } from 'types/card';\n\ninterface ICardsState {\n  cards: ICard[];\n  activeCards: ICard[];\n  gameInProgress: boolean;\n}\n\nconst initialState: ICardsState = {\n  cards: [],\n  activeCards: [],\n  gameInProgress: false,\n};\n\nconst cardsGameSlice = createSlice({\n  name: 'cardsGame',\n  initialState,\n  reducers: {\n    setupGame(state: ICardsState, action: PayloadAction<ICard[]>) {\n      const addedCards = [...action.payload];\n\n      return {\n        ...initialState,\n        cards: addedCards,\n      };\n    },\n    startGame(state: ICardsState) {\n      return {\n        ...state,\n        gameInProgress: true,\n      };\n    },\n    selectCard(state: ICardsState, action: PayloadAction<ICard['id']>) {\n      const cardId = action.payload;\n      const selectedCard = state.cards.find((card) => card.id === cardId);\n      if (!selectedCard) return state;\n\n      let activeCards: ICard[];\n      if (state.activeCards.length >= 2) {\n        activeCards = [];\n      } else {\n        activeCards = [...state.activeCards];\n      }\n\n      const matchedCard = activeCards.find(\n        (card) => card.number === selectedCard.number,\n      );\n\n      if (matchedCard) {\n        const updatedCards = [...state.cards];\n        const selectedCardIndex = updatedCards.findIndex(\n          (card) => card.id === selectedCard.id,\n        );\n        const matchedCardIndex = updatedCards.findIndex(\n          (card) => card.id === matchedCard.id,\n        );\n\n        updatedCards[selectedCardIndex] = { ...selectedCard, isGuessed: true };\n        updatedCards[matchedCardIndex] = { ...matchedCard, isGuessed: true };\n\n        return {\n          ...state,\n          cards: updatedCards,\n          activeCards: [],\n        };\n      }\n\n      return {\n        ...state,\n        activeCards: [...activeCards, selectedCard],\n      };\n    },\n    deselectCard(state: ICardsState, action: PayloadAction<ICard['id']>) {\n      const cardId = action.payload;\n      const filteredActiveCards = state.activeCards.filter(\n        (card) => card.id !== cardId,\n      );\n\n      return {\n        ...state,\n        activeCards: filteredActiveCards,\n      };\n    },\n  },\n});\n\nexport const selectCardWithDelayedDeselect = createAsyncThunk<\n  void,\n  ICard['id'],\n  { state: RootState }\n>(\n  'cardsGame/selectCardWithDelayedDeselect',\n  (cardId, { dispatch, getState }) => {\n    const { activeCards } = getState().cardsGame;\n\n    if (activeCards.length === 1) {\n      setTimeout(() => {\n        activeCards.forEach((card) => {\n          dispatch(cardsGameSlice.actions.deselectCard(card.id));\n        });\n        dispatch(cardsGameSlice.actions.deselectCard(cardId));\n      }, 750);\n    }\n\n    dispatch(cardsGameSlice.actions.selectCard(cardId));\n  },\n);\n\nexport const { setupGame, startGame, selectCard, deselectCard } =\n  cardsGameSlice.actions;\n\nexport default cardsGameSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport cardsGameReducer from './features/cardsGame/cardsGameSlice';\n\nexport default combineReducers({\n  cardsGame: cardsGameReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default store;\n","const isPrime = (num: number): boolean => {\n  for (let i = 2; i < num; i += 1) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const getPrimeNumbers = (max: number): number[] => {\n  const array = [2];\n\n  for (let i = 3; i < max; i += 2) {\n    if (isPrime(i)) {\n      array.push(i);\n    }\n  }\n\n  return array;\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { ICard } from 'types/card';\nimport { shuffle } from './shuffle';\nimport { getPrimeNumbers } from './getPrimeNumbers';\n\nexport const getGameCards = (): ICard[] => {\n  const primeNumbers = getPrimeNumbers(50);\n  const duplicatedNumbers = [...primeNumbers, ...primeNumbers];\n  const shuffledNumbers = shuffle(duplicatedNumbers);\n\n  return shuffledNumbers.map((number) => ({\n    id: uuidv4(),\n    number,\n    isGuessed: false,\n  }));\n};\n","export const shuffle = <T>(array: Array<T>): Array<T> => {\n  const copiedArray = [...array];\n\n  return copiedArray.sort(() => Math.random() - 0.5);\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'redux/store';\n\nconst selectCardGame = (state: RootState) => state.cardsGame;\n\nexport const selectGameCards = createSelector(\n  [selectCardGame],\n  (cardsGame) => cardsGame.cards,\n);\n\nexport const selectActiveCards = createSelector(\n  [selectCardGame],\n  (cardsGame) => cardsGame.activeCards,\n);\n\nexport const selectGameInProgress = createSelector(\n  [selectCardGame],\n  (cardsGame) => cardsGame.gameInProgress,\n);\n","import React from 'react';\nimport './Header.scss';\n\ninterface IHeaderProps {\n  title: string;\n}\n\nconst Header: React.FC<IHeaderProps> = ({ title }) => (\n  <header className=\"header\">\n    <h1 className=\"header__title\">{title}</h1>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport Header from 'components/Header/Header';\nimport './MainLayout.scss';\n\nconst MainLayout: React.FC = ({ children }) => (\n  <div className=\"main-layout\">\n    <Header title=\"Mahjong-like game\" />\n    <div className=\"main-layout__content\">{children}</div>\n  </div>\n);\n\nexport default MainLayout;\n","import React from 'react';\nimport './CardsContainer.scss';\n\nconst CardsContainer: React.FC = ({ children }) => (\n  <div className=\"cards-container\">{children}</div>\n);\n\nexport default CardsContainer;\n","import React from 'react';\nimport cn from 'classnames';\nimport './Card.scss';\n\ninterface ICardProps extends React.HTMLAttributes<HTMLDivElement> {\n  isVisible?: boolean;\n  isActive?: boolean;\n  isGuessed?: boolean;\n}\n\nconst Card: React.FC<ICardProps> = ({\n  children,\n  isVisible = false,\n  isActive = false,\n  isGuessed = false,\n  ...restProps\n}) => {\n  const shouldDisplayContent = isVisible || isActive || isGuessed;\n\n  return (\n    <div\n      className={cn('card', {\n        card_active: isActive,\n        card_guessed: isGuessed,\n      })}\n      {...restProps}\n    >\n      {shouldDisplayContent && (\n        <span className=\"card__content\">{children}</span>\n      )}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport cn from 'classnames';\nimport './GameActions.scss';\n\nconst GameActions: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  className,\n  ...restProps\n}) => (\n  <div className={cn('game-actions', className)} {...restProps}>\n    {children}\n  </div>\n);\n\nexport default GameActions;\n","import { ButtonHTMLAttributes, forwardRef } from 'react';\nimport cn from 'classnames';\nimport './Button.scss';\n\nexport interface IButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'outlined' | 'contained';\n}\n\nconst Button = forwardRef<HTMLButtonElement, IButtonProps>(\n  ({ children, className, variant = 'outlined', ...restProps }, ref) => (\n    <button\n      ref={ref}\n      type=\"button\"\n      className={cn('button', className, {\n        button_contained: variant === 'contained',\n      })}\n      {...restProps}\n    >\n      {children}\n    </button>\n  ),\n);\n\nexport default Button;\n","import React, { useEffect } from 'react';\nimport { ICard } from 'types/card';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'redux/store';\nimport { getGameCards } from 'helpers/getGameCards';\nimport {\n  selectGameCards,\n  selectActiveCards,\n  selectGameInProgress,\n} from 'redux/features/cardsGame/cardsGameSelectors';\nimport {\n  setupGame,\n  startGame,\n  selectCardWithDelayedDeselect,\n} from 'redux/features/cardsGame/cardsGameSlice';\nimport MainLayout from 'layouts/MainLayout/MainLayout';\nimport CardsContainer from 'components/CardsContainer/CardsContainer';\nimport Card from 'components/Card/Card';\nimport GameActions from 'components/GameActions/GameActions';\nimport Button from 'components/Button/Button';\nimport './MainPage.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const gameCards = useSelector(selectGameCards);\n  const activeCards = useSelector(selectActiveCards);\n  const gameInProgress = useSelector(selectGameInProgress);\n\n  const isActive = (cardId: ICard['id']): boolean =>\n    activeCards.some((card) => card.id === cardId);\n\n  const handleSetupNewGame = () => {\n    const generatedCards = getGameCards();\n\n    dispatch(setupGame(generatedCards));\n  };\n\n  useEffect(() => {\n    handleSetupNewGame();\n  }, []);\n\n  const handleStartGame = () => {\n    dispatch(startGame());\n  };\n\n  const handleSelectCard = (selectedCard: ICard) => {\n    const isSelectable = !selectedCard.isGuessed && !isActive(selectedCard.id);\n    if (!isSelectable || !gameInProgress) return;\n\n    dispatch(selectCardWithDelayedDeselect(selectedCard.id));\n  };\n\n  return (\n    <MainLayout>\n      <CardsContainer>\n        {gameCards.map((card) => (\n          <Card\n            key={card.id}\n            tabIndex={0}\n            isVisible={!gameInProgress}\n            isActive={isActive(card.id)}\n            isGuessed={card.isGuessed}\n            onClick={() => handleSelectCard(card)}\n          >\n            {card.number}\n          </Card>\n        ))}\n      </CardsContainer>\n      <GameActions className=\"main-page__actions\">\n        <Button\n          type=\"button\"\n          className=\"main-page__button\"\n          variant=\"outlined\"\n          onClick={handleSetupNewGame}\n        >\n          Refresh\n        </Button>\n        <Button\n          type=\"button\"\n          className=\"main-page__button\"\n          variant=\"contained\"\n          onClick={handleStartGame}\n          disabled={gameInProgress}\n        >\n          Start Game\n        </Button>\n      </GameActions>\n    </MainLayout>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store';\nimport MainPage from 'pages/MainPage/MainPage';\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <MainPage />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}